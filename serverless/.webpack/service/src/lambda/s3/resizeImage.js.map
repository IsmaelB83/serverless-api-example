{"version":3,"file":"src/lambda/s3/resizeImage.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ER,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,mCCLlBC,QAAQ,+BAA7C,MCAM,EAA+BA,QAAQ,WCAvC,EAA+BA,QAAQ,W,aCM7C,MAAMC,EAAK,IAAI,KACTC,EAAwBC,QAAQC,IAAIC,iBACpCC,EAA4BH,QAAQC,IAAIG,qBAExCC,EAA0BL,QAAQC,IAAII,gBACtCC,EAAuBN,QAAQC,IAAIK,aACnCC,EAAY,IAAI,0BAOTC,EAAsBC,MAAOC,IAExC,IAAK,MAAMC,KAAaD,EAAME,QAAS,CAErCC,QAAQC,IAAI,0BAA2BH,GAEvC,MAAMI,EAAmBC,KAAKC,MAAMN,EAAUO,IAAIC,SAClDN,QAAQC,IAAI,wBAAyBC,GACrC,IAAK,MAAMK,KAAUL,EAAQH,QAAS,OAC9BS,EAAYD,EAAOtB,GAAGwB,OAAOvC,KAEnC,MAAMwC,QAAoBhB,EAAUiB,MAAM,CACxCC,UAAWnB,EACXoB,UAAWrB,EACXsB,uBAAwB,qBACxBC,0BAA2B,CACzB,WAAYR,EAAOtB,GAAGwB,OAAOvC,OAE9B8C,UAEH,GADAhB,QAAQC,IAAI,iBAAkBS,GAC1BA,EAAYO,MAAO,CAErB,MAAMC,EAAsD,CAC1DN,UAAWnB,EACX0B,IAAK,CACH,QAAWT,EAAYO,MAAM,GAAGG,QAChC,UAAaV,EAAYO,MAAM,GAAGI,WAEpCC,iBAAkB,qBAClBP,0BAA2B,CACvB,KAAM,2DAA2DR,EAAOtB,GAAGwB,OAAOvC,OAEtFqD,aAAc,WAEhBvB,QAAQC,IAAI,wBAAyBiB,GACrC,IACE,MAAMM,QAAa9B,EAAU+B,OAAOP,SAC9BjC,EAAGyC,UAAU,CACjBC,OAAQrC,EACR6B,IAAK,OAAOT,EAAYO,MAAM,GAAGI,YACjCO,YAAa,mBACbC,KAAM1B,KAAK2B,UAAUN,KACpBR,UACHhB,QAAQC,IAAI,uBAAwBuB,GACpC,MAAOO,GACP/B,QAAQC,IAAI,mBAAoB8B,QAW1CnC,eAAeY,EAAYtC,GAEzB,MAAM8D,QAAiB/C,EAAGgD,UAAU,CAClCN,OAAQzC,EACRiC,IAAKjD,IACJ8C,UACHhB,QAAQC,IAAI,qBAAsB+B,GAElC,MAAME,EAAOF,EAASH,KAChBM,QAAc,SAAUD,GAC9BC,EAAMC,OAAO,IAAK,UAClB,MAAMC,QAAwBF,EAAMG,eAAe,gBAE7CrD,EAAGyC,UAAU,CACjBC,OAAQrC,EACR6B,IAAK,GAAGjD,IACR0D,YAAaI,EAASJ,YACtBC,KAAMQ,IACLrB,U","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external commonjs \"source-map-support/register\"","webpack:///external commonjs \"aws-sdk\"","webpack:///external commonjs \"jimp/es\"","webpack:///./src/lambda/s3/resizeImage.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"source-map-support/register\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"aws-sdk\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jimp/es\");","import { SNSHandler, SNSEvent, S3Event } from 'aws-lambda';\nimport 'source-map-support/register'\nimport * as AWS from 'aws-sdk';\nimport Jimp from 'jimp/es'\n\n// Buckets\nconst s3 = new AWS.S3();\nconst IMAGES_BUCKET: string = process.env.IMAGES_S3_BUCKET!;\nconst THUMBNAILS_BUCKET: string = process.env.THUMBNAILS_S3_BUCKET!;\n// Images table\nconst IMAGES_ID_INDEX: string = process.env.IMAGES_ID_INDEX!;\nconst IMAGES_TABLE: string = process.env.IMAGES_TABLE!;\nconst docClient = new AWS.DynamoDB.DocumentClient();\n\n\n/**\n * Process SNS Event\n * @param event SNS Event received\n */\nexport const handler: SNSHandler = async (event: SNSEvent) => {\n  // Iterate trhough each sns record received in the event\n  for (const snsRecord of event.Records) {\n    // Log\n    console.log('Processing SNS Record: ', snsRecord);\n    // The message receive in the SNS Event is an S3Event\n    const s3Event: S3Event = JSON.parse(snsRecord.Sns.Message);\n    console.log('Processing S3 event: ', s3Event);\n    for (const record of s3Event.Records) {\n      await resizeImage(record.s3.object.key); \n      // Retrieves current item\n      const currentItem = await docClient.query({\n        TableName: IMAGES_TABLE,\n        IndexName: IMAGES_ID_INDEX,\n        KeyConditionExpression: 'imageId = :imageId',\n        ExpressionAttributeValues: {\n          ':imageId': record.s3.object.key\n        }\n      }).promise();\n      console.log('Current item: ', currentItem);\n      if (currentItem.Items) {\n        // Updates table\n        const params: AWS.DynamoDB.DocumentClient.UpdateItemInput = {\n          TableName: IMAGES_TABLE,\n          Key: { \n            \"groupId\": currentItem.Items[0].groupId,\n            \"timestamp\": currentItem.Items[0].timestamp\n          },\n          UpdateExpression: 'SET thumbnail = :s',\n          ExpressionAttributeValues: {\n              \":s\": `https://udagram-thumbnails-ibernal-dev.s3.amazonaws.com/${record.s3.object.key}`,\n          },\n          ReturnValues: \"ALL_NEW\"\n        };\n        console.log('Update images table: ', params);\n        try {\n          const data = await docClient.update(params);\n          await s3.putObject({\n            Bucket: THUMBNAILS_BUCKET,\n            Key: `log_${currentItem.Items[0].timestamp}`,\n            ContentType: 'application/json',\n            Body: JSON.stringify(data)\n          }).promise()\n          console.log('Updated image item: ', data);\n        } catch (error) {\n          console.log('Error updating: ', error);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resize the image related to this s3 event and puts the thumbnail in a different bucket\n * @param key S3 Image key\n */\nasync function resizeImage(key: string) {\n  // Download image from bucket\n  const response = await s3.getObject({\n    Bucket: IMAGES_BUCKET,\n    Key: key\n  }).promise()\n  console.log('S3 original item: ', response);\n  // Resize image with JIMP\n  const body = response.Body!;\n  const image = await Jimp.read(body)\n  image.resize(150, Jimp.AUTO)\n  const convertedBuffer = await image.getBufferAsync(Jimp.AUTO)\n  // Put image in thumbnails bucket\n  await s3.putObject({\n    Bucket: THUMBNAILS_BUCKET,\n    Key: `${key}`,\n    ContentType: response.ContentType,\n    Body: convertedBuffer\n  }).promise()\n}"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","s3","IMAGES_BUCKET","process","env","IMAGES_S3_BUCKET","THUMBNAILS_BUCKET","THUMBNAILS_S3_BUCKET","IMAGES_ID_INDEX","IMAGES_TABLE","docClient","handler","async","event","snsRecord","Records","console","log","s3Event","JSON","parse","Sns","Message","record","resizeImage","object","currentItem","query","TableName","IndexName","KeyConditionExpression","ExpressionAttributeValues","promise","Items","params","Key","groupId","timestamp","UpdateExpression","ReturnValues","data","update","putObject","Bucket","ContentType","Body","stringify","error","response","getObject","body","image","resize","convertedBuffer","getBufferAsync"],"sourceRoot":""}