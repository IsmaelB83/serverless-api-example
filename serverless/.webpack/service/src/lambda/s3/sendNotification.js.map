{"version":3,"file":"src/lambda/s3/sendNotification.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,mCCLlBC,QAAQ,+BAA7C,MCAM,EAA+BA,QAAQ,WCIvCC,EAAa,IAAI,0BACjBC,EAAoBC,QAAQC,IAAIF,mBAAqB,GACrDG,EAAQF,QAAQC,IAAIC,MAGpBC,EAAoB,CACxBC,WAAY,aACZC,SAAW,GAJEL,QAAQC,IAAIK,8CAImCJ,KAGxDK,EAAc,IAAI,0BAA4BJ,GAMvCK,EAAsBC,MAAOC,IAExC,IAAK,MAAMC,KAAaD,EAAME,QAAS,CAErCC,QAAQC,IAAI,0BAA2BH,GAEvC,MAAMI,EAAUC,KAAKC,MAAMN,EAAUO,IAAIC,eACnCC,EAAeL,KAQzBN,eAAeW,EAAgBV,GAE7BG,QAAQC,IAAI,wBAAyBJ,GAErC,MAAMW,QAAoBvB,EAAWwB,KAAK,CACxCC,UAAWxB,IACVyB,UAEH,GAAIH,EAAYI,MAEd,IAAK,MAAMC,KAAUhB,EAAME,QACzB,IAAK,MAAMe,KAAcN,EAAYI,MAAO,CAC1C,MAAMG,EAAeD,EAAWE,SAC1BC,EAAoBF,EAAc,CAAEG,QAASL,EAAOM,GAAGC,OAAOlD,OAW5E0B,eAAeqB,EAAoBF,EAAsBM,GACvD,IAEErB,QAAQC,IAAI,oCAAqCc,SAC3CrB,EAAY4B,iBAAiB,CACjCC,aAAcR,EACdS,KAAMrB,KAAKsB,UAAUJ,KACpBV,UACH,MAAOe,GAEP1B,QAAQC,IAAI,+BAAgCyB,GACnB,MAArBA,EAAMC,aACR3B,QAAQC,IAAI,0BACNhB,EAAW2C,OAAO,CACtBlB,UAAWxB,EACX2C,IAAK,CAAEb,GAAID,O","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external commonjs \"source-map-support/register\"","webpack:///external commonjs \"aws-sdk\"","webpack:///./src/lambda/s3/sendNotification.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"source-map-support/register\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"aws-sdk\");","import { SNSHandler, SNSEvent, S3Event } from 'aws-lambda';\nimport 'source-map-support/register'\nimport * as AWS from 'aws-sdk';\n\nconst DOC_CLIENT = new AWS.DynamoDB.DocumentClient();\nconst CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || '';\nconst STAGE = process.env.STAGE;\nconst API_ID = process.env.API_ID;\n\nconst CONNECTION_PARAMS = {\n  apiVersion: \"2018-11-29\",\n  endpoint:  `${API_ID}.execute-api.us-east-1.amazonaws.com/${STAGE}`\n}\n\nconst API_GATEWAY = new AWS.ApiGatewayManagementApi(CONNECTION_PARAMS);\n\n/**\n * Process SNS Event\n * @param event SNS Event received\n */\nexport const handler: SNSHandler = async (event: SNSEvent) => {\n  // Iterate trhough each sns record received in the event\n  for (const snsRecord of event.Records) {\n    // Log\n    console.log('Processing SNS Record: ', snsRecord);\n    // The message receive in the SNS Event is an S3Event\n    const s3Event = JSON.parse(snsRecord.Sns.Message);\n    await processS3Event(s3Event);\n  }\n}\n\n/**\n * Process S3 events received in the SNS Event\n * @param event S3 Event trigger by the bucket\n */\nasync function processS3Event (event: S3Event) {\n  // Log\n  console.log('Processing S3 event: ', event);\n  // Read current wss connections\n  const connections = await DOC_CLIENT.scan({\n    TableName: CONNECTIONS_TABLE\n  }).promise();\n  // If there are connections\n  if (connections.Items) {\n    // S3 Event could have more than one record\n    for (const record of event.Records) {\n      for (const connection of connections.Items) {\n        const connectionId = connection.id;\n        await sendMessageToClient(connectionId, { imageId: record.s3.object.key });         \n      } \n    }\n  }\n}\n\n/**\n * Send message to a connected client\n * @param connectionId WSS Connection id\n * @param payload Message to send\n */\nasync function sendMessageToClient(connectionId: string, payload: any) {\n  try {\n    // Post message to the wss connection\n    console.log('Sending message to a connection: ', connectionId);\n    await API_GATEWAY.postToConnection({\n      ConnectionId: connectionId,\n      Data: JSON.stringify(payload)\n    }).promise();\n  } catch (error) {\n    // If there is an exception deletes connectionId from DynamoDB\n    console.log('Failed to send the message: ', error)\n    if (error.statusCode === 410) {\n      console.log('Stale connection');\n      await DOC_CLIENT.delete({\n        TableName: CONNECTIONS_TABLE,\n        Key: { id: connectionId }\n      });\n    }\n  }\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","DOC_CLIENT","CONNECTIONS_TABLE","process","env","STAGE","CONNECTION_PARAMS","apiVersion","endpoint","API_ID","API_GATEWAY","handler","async","event","snsRecord","Records","console","log","s3Event","JSON","parse","Sns","Message","processS3Event","connections","scan","TableName","promise","Items","record","connection","connectionId","id","sendMessageToClient","imageId","s3","object","payload","postToConnection","ConnectionId","Data","stringify","error","statusCode","delete","Key"],"sourceRoot":""}